#Load Materials
library(googlesheets4)
library(tidyverse)
library(ThemePark)
library(scales)
library(janitor)
couples <- read_sheet(ss = "https://docs.google.com/spreadsheets/d/1R8WJhW0E-5_SnKRsT66lw4UuY45dezcGFVhQgJG2LIA/edit?usp=sharing",
sheet = "Unique_Couples")
couples <- read_sheet(ss = "https://docs.google.com/spreadsheets/d/1R8WJhW0E-5_SnKRsT66lw4UuY45dezcGFVhQgJG2LIA/edit?usp=sharing",
sheet = "Unique_Couples")
couples <- clean_names(couples)
couples <- couples |>
filter(!exclude) |>
mutate(show = unlist(show)) |>
dplyr::select(-starts_with(c("make_it_official", "exclude")), -already_together, -imdb_id)
couples |>
ggplot(aes(x = mentions)) +
geom_bar(fill = "purple") +
theme_barbie() +
labs(title = "Who are we talking about?",
x = "Number of Mentions",
y = "Number of Couples")
couples |> head()
couples |> pull(show) |> count()
couples |> pull(show) |> unique()
couples |> pull(show) |> unique() |> length()
couples |> head()
couples |> pull(couple) |> unique() |> length()
couples |> colnames()
ratings <- read_sheet(ss = "https://docs.google.com/spreadsheets/d/1R8WJhW0E-5_SnKRsT66lw4UuY45dezcGFVhQgJG2LIA/edit?usp=sharing",
sheet = "Episode_Ratings")
ratings <- read_sheet(ss = "https://docs.google.com/spreadsheets/d/1R8WJhW0E-5_SnKRsT66lw4UuY45dezcGFVhQgJG2LIA/edit?usp=sharing",
sheet = "Episode_Ratings")
#Load Materials
library(googlesheets4)
library(tidyverse)
library(ThemePark)
library(scales)
library(janitor)
couples <- read_sheet(ss = "https://docs.google.com/spreadsheets/d/1R8WJhW0E-5_SnKRsT66lw4UuY45dezcGFVhQgJG2LIA/edit?usp=sharing",
sheet = "Unique_Couples")
couples <- clean_names(couples)
couples <- couples |>
filter(!exclude) |>
mutate(show = unlist(show)) |>
dplyr::select(-starts_with(c("make_it_official", "exclude")), -already_together, -imdb_id)
ratings <- read_sheet(ss = "https://docs.google.com/spreadsheets/d/1R8WJhW0E-5_SnKRsT66lw4UuY45dezcGFVhQgJG2LIA/edit?usp=sharing",
sheet = "Episode_Ratings")
ratings <- clean_names(ratings)
# Exclude ratings rows with missing data
ratings <- ratings[complete.cases(ratings), ]
ratings |> colnames()
#center on first kiss before fitting the model
its_mod <- lm(data = ratings_couples,
rating ~ eps_since_kiss + after_first_kiss + eps_since_kiss * after_first_kiss)
# Create an indicator variable for episodes that aired after first kiss
ratings_couples <- ratings_couples |>
group_by(show, couple) |>
mutate(show_couple_id = 1:n(),
is_first_kiss_ep = season == first_kiss_season & episode == first_kiss_episode,
first_kiss_id = min(ifelse(test = is_first_kiss_ep, yes = show_couple_id, no = 9999)),
after_first_kiss = show_couple_id > first_kiss_id) |>
dplyr::select(-is_first_kiss_ep) |>
mutate(eps_since_kiss = show_couple_id - first_kiss_id) |>
ungroup()
# Left-join episodes and ratings into the couples
ratings_couples <- couples[1:20, ] |>
left_join(ratings,
by = join_by(show == show))
# Create an indicator variable for episodes that aired after first kiss
ratings_couples <- ratings_couples |>
group_by(show, couple) |>
mutate(show_couple_id = 1:n(),
is_first_kiss_ep = season == first_kiss_season & episode == first_kiss_episode,
first_kiss_id = min(ifelse(test = is_first_kiss_ep, yes = show_couple_id, no = 9999)),
after_first_kiss = show_couple_id > first_kiss_id) |>
dplyr::select(-is_first_kiss_ep) |>
mutate(eps_since_kiss = show_couple_id - first_kiss_id) |>
ungroup()
#center on first kiss before fitting the model
its_mod <- lm(data = ratings_couples,
rating ~ eps_since_kiss + after_first_kiss + eps_since_kiss * after_first_kiss)
summary(its_mod_)
summary(its_mod)
its_mod |> tidy()
library(broom)
its_mod |> tidy()
its_mod |> tidy(conf.int = TRUE)
its_mod |> tidy(conf.int = TRUE) |>
dplyr::select(term, estimate, p.value, conf.low, conf.high)
its_mod_ng <- lm(data = ratings_couples,
rating ~ eps_since_kiss + after_first_kiss + eps_since_kiss * after_first_kiss,
subset = show == "New Girl") ## fit model only to New Girl
its_mod_ng |> tidy(conf.int = TRUE) |>
dplyr::select(term, estimate, p.value, conf.low, conf.high)
install.packages("countreg", repos="http://R-Forge.R-project.org")
library(countreg)
library(tidyverse)
n <- 1000
x <- rnorm(n)
p <- exp(0.5 + x)/(1 + exp(0.5 + x))
lambda <- exp(-0.2 + 0.7*x)
set.seed(712)
x <- rnorm(n)
p <- exp(0.5 + x)/(1 + exp(0.5 + x))
lambda <- exp(-0.2 + 0.7*x)
z <- rbinom(n, 1, p)
y <- rztpois(n, lambda = lambda)*z
#Q1
m1 <- hurdle(y ~ x, dist = "poisson", zero.dist = "binomial")
summary(m1)
data.frame(x = x, resids = countreg::qresiduals(m1)) |>
ggplot(aes(x = x, y = resids)) +
geom_point() +
geom_smooth() +
theme_bw()
#Q3
rootogram(m1)
#Q4
lambda_badpois <- exp(-0.2 + 0.7*x^2)
y_badpois <- rztpois(n, lambda = lambda_badpois)*z
summary(m4)
m4 <- hurdle(y_badpois ~ x, dist = "poisson", zero.dist = "binomial")
summary(m4)
summary(m1)
summary(m4)
data.frame(x = x, resids = countreg::qresiduals(m4)) |>
ggplot(aes(x = x, y = resids)) +
geom_point() +
geom_smooth() +
theme_bw()
library(patchwork)
qresid_zero <- function(m){
z <- m$y > 0
x <- model.matrix(m, "zero")
p <- exp(x %*% m$coefficients$zero)/(1 + exp(x %*% m$coefficients$zero))
u <- ifelse(z == 1, runif(length(z), 1-p, 1), runif(length(z), 0, 1-p))
return(qnorm(u))
}
p1 <- data.frame(x = x[y > 0], resids = qresid_count(m1)) |>
ggplot(aes(x = x, y = resids)) +
geom_point() +
geom_smooth() +
theme_bw() +
labs(y = "Quantile residuals", title = "Count component")
# randomized quantile residuals for the binomial component
qresid_count <- function(m){
y <- m$y
x <- model.matrix(m, "count")
x <- x[y > 0,]
y <- y[y > 0]
lambdas <- exp(x %*% m$coefficients$count)
dist <- m$dist$count
if(dist == "poisson"){
cdf_b <- c(pztpois(y, lambda = lambdas))
cdf_a <- c(suppressWarnings(pztpois(y-1, lambda = lambdas)))
} else if(dist == "negbin"){
cdf_b <- c(pztnbinom(y, mu = lambdas, size=m$theta))
cdf_a <- c(suppressWarnings(pztnbinom(y-1, mu = lambdas, size=m$theta)))
} else {
return("Error: please use a poisson or negative binomial hurdle model")
}
resids <- qnorm(runif(length(y), cdf_a, cdf_b))
return(resids)
}
p1 <- data.frame(x = x[y > 0], resids = qresid_count(m1)) |>
ggplot(aes(x = x, y = resids)) +
geom_point() +
geom_smooth() +
theme_bw() +
labs(y = "Quantile residuals", title = "Count component")
p2 <- data.frame(x = x, resids = qresid_zero(m4)) |>
ggplot(aes(x = x, y = resids)) +
geom_point() +
geom_smooth() +
theme_bw() +
labs(y = "Quantile residuals", title = "Zero component")
p1 <- data.frame(x = x[y > 0], resids = qresid_count(m4)) |>
ggplot(aes(x = x, y = resids)) +
geom_point() +
geom_smooth() +
theme_bw() +
labs(y = "Quantile residuals", title = "Count component")
p2 <- data.frame(x = x, resids = qresid_zero(m4)) |>
ggplot(aes(x = x, y = resids)) +
geom_point() +
geom_smooth() +
theme_bw() +
labs(y = "Quantile residuals", title = "Zero component")
p1 + p2
