#extend bottom right matrix
#zzt <- data[, Z] %*% t(data[, Z]) #issue in dimensionality
ztz <- t(data[,Z]) %*% data[,Z] #temp issue fix
l_wide <- matrix(data = l,
nrow = length(l),
ncol = ncol(ztz), #temp issue fix
#ncol = ncol(zzt), #same issue
byrow = FALSE)
#bottom_right <- colSums(zzt * l_wide) #issue in dimensionality
bottom_right <- colSums(ztz * l_wide) #temp issue fix
i[-c(1:2), -c(1:2)] <- bottom_right
}
if (!is.null(Z)) {
#extend bottom left vector (sum of product of Z and lambda)
l_wide <- matrix(data = l,
nrow = length(l),
ncol = length(Z),
byrow = FALSE)
bottom_left <- colSums(data[, Z] * l_wide)
i[-c(1:2), 1] <- bottom_left
i[1, -c(1:2)] <- t(bottom_left)
#extend bottom middle vector (sum of product of X, Z, and lambda)
xl <- data[,X] * l
xl_wide <- matrix(data = xl,
nrow = length(xl),
ncol = length(Z),
byrow = FALSE)
bottom_middle <- colSums(data[, Z] * xl_wide)
i[-c(1:2), 2] <- bottom_middle
i[2, -c(1:2)] <- t(bottom_middle)
#extend bottom right matrix
#zzt <- data[, Z] %*% t(data[, Z]) #issue in dimensionality
zz <- data[,Z] * data[,Z] #temp issue fix
l_wide <- matrix(data = l,
nrow = length(l),
ncol = ncol(zz), #temp issue fix
#ncol = ncol(zzt), #same issue
byrow = FALSE)
#bottom_right <- colSums(zzt * l_wide) #issue in dimensionality
bottom_right <- colSums(zz * l_wide) #temp issue fix
i[-c(1:2), -c(1:2)] <- bottom_right
}
zz <- data[,Z] * data[,Z]
zz
if (!is.null(Z)) {
#extend bottom left vector (sum of product of Z and lambda)
l_wide <- matrix(data = l,
nrow = length(l),
ncol = length(Z),
byrow = FALSE)
bottom_left <- colSums(data[, Z] * l_wide)
i[-c(1:2), 1] <- bottom_left
i[1, -c(1:2)] <- t(bottom_left)
#extend bottom middle vector (sum of product of X, Z, and lambda)
xl <- data[,X] * l
xl_wide <- matrix(data = xl,
nrow = length(xl),
ncol = length(Z),
byrow = FALSE)
bottom_middle <- colSums(data[, Z] * xl_wide)
i[-c(1:2), 2] <- bottom_middle
i[2, -c(1:2)] <- t(bottom_middle)
#extend bottom right matrix
#zzt <- data[, Z] %*% t(data[, Z]) #issue in dimensionality
zz <- data[,Z] * data[,Z] #temp issue fix
#l_wide <- matrix(data = l,
#/nrow = length(l),
#ncol = ncol(zz),
#ncol = ncol(zzt), #same issue
#byrow = FALSE)
#bottom_right <- colSums(zzt * l_wide) #issue in dimensionality
bottom_right <- colSums(zz * l) #temp issue fix
i[-c(1:2), -c(1:2)] <- bottom_right
}
if (!is.null(Z)) {
#extend bottom left vector (sum of product of Z and lambda)
l_wide <- matrix(data = l,
nrow = length(l),
ncol = length(Z),
byrow = FALSE)
bottom_left <- colSums(data[, Z] * l_wide)
i[-c(1:2), 1] <- bottom_left
i[1, -c(1:2)] <- t(bottom_left)
#extend bottom middle vector (sum of product of X, Z, and lambda)
xl <- data[,X] * l
xl_wide <- matrix(data = xl,
nrow = length(xl),
ncol = length(Z),
byrow = FALSE)
bottom_middle <- colSums(data[, Z] * xl_wide)
i[-c(1:2), 2] <- bottom_middle
i[2, -c(1:2)] <- t(bottom_middle)
#extend bottom right matrix
#zzt <- data[, Z] %*% t(data[, Z]) #issue in dimensionality
zz <- data[,Z] * data[,Z] #temp issue fix
#l_wide <- matrix(data = l,
#/nrow = length(l),
#ncol = ncol(zz),
#ncol = ncol(zzt), #same issue
#byrow = FALSE)
#bottom_right <- colSums(zzt * l_wide) #issue in dimensionality
bottom_right <- sum(zz * l) #temp issue fix
i[-c(1:2), -c(1:2)] <- bottom_right
}
#Fisher information
info <- function(beta, X, Z = NULL, data) {
#turn inputs into matrices
beta <- matrix(data = beta, ncol = 1)
data <- data.matrix(frame = data) #holds X, Z, and other potential covariates
#initialize lambda
if(is.null(Z)) {
l <- exp(beta[1] + beta[2] * data[, X])
} else {
l <- exp(beta[1] + data[, c(X,Z)] %*% beta[-1]) #dim n x 1
}
#save top left 2x2
mini_top_left <- sum(l)
mini_top_right <- sum(data[, X] * l)
mini_bottom_left <- mini_top_right
mini_bottom_right <- sum(data[,X]^2 * l)
#create empty information matrix
i <- matrix(data = 0,
nrow = nrow(beta),
ncol = nrow(beta))
i[1, 1] <- mini_top_left
i[1, 2] <- i[2, 1] <- mini_bottom_left
i[2, 2] <- mini_bottom_right
if (!is.null(Z)) {
#extend bottom left vector (sum of product of Z and lambda)
l_wide <- matrix(data = l,
nrow = length(l),
ncol = length(Z),
byrow = FALSE)
bottom_left <- colSums(data[, Z] * l_wide)
i[-c(1:2), 1] <- bottom_left
i[1, -c(1:2)] <- t(bottom_left)
#extend bottom middle vector (sum of product of X, Z, and lambda)
xl <- data[,X] * l
xl_wide <- matrix(data = xl,
nrow = length(xl),
ncol = length(Z),
byrow = FALSE)
bottom_middle <- colSums(data[, Z] * xl_wide)
i[-c(1:2), 2] <- bottom_middle
i[2, -c(1:2)] <- t(bottom_middle)
#extend bottom right matrix
#zzt <- data[, Z] %*% t(data[, Z]) #issue in dimensionality
zz <- data[,Z] * data[,Z] #temp issue fix
#l_wide <- matrix(data = l,
#/nrow = length(l),
#ncol = ncol(zz),
#ncol = ncol(zzt), #same issue
#byrow = FALSE)
#bottom_right <- colSums(zzt * l_wide) #issue in dimensionality
bottom_right <- sum(zz * l) #temp issue fix
i[-c(1:2), -c(1:2)] <- bottom_right
}
return(i)
}
beta <- c(1, 2, 3)
x <- runif(100, min = 0, max = 1)
z <- runif(100, min = 0, max = 1)
lambda <- exp(beta[1] + beta[2] * x + beta[3] * z)
y <- rpois(100, lambda)
data <- data.frame(x,z,y)
info(beta, "x", "z", data)
find_beta <- function(start_guess, x, y, z, data,
maxtol = 0.00001,
maxiter = 1000,
verbose = FALSE) {
beta_curr <- start_guess
diff <- maxtol + 1
iterations <- 0
while(diff > maxtol & iterations <= maxiter){
beta_next <- beta_curr - solve(info(beta_curr, x, z, data)) %*% U(beta_curr, x, y, z, data)
diff <- max(abs(beta_next[1] - beta_curr[1]), abs(beta_next[2] - beta_curr[2]))
iterations <- iterations + 1
beta_curr <- beta_next
if(verbose) {
print(paste("beta_next:", beta_next,"\n"))
print(paste("diff:", diff, "\n"))
print(paste("iterations:", iterations, "\n"))
}
}
if(diff > maxtol & iterations >= maxiter){
conv_msg = "We hit the maximum number of iterations but did not converge."
}
else { conv_msg = "We have achieved convergence!"}
return(list(estimates = beta_curr,
convergence = conv_msg))
}
set.seed(1031)
beta0 <- 0.5
beta1 <- 0.25
x <- runif(100, min = 0, max = 1) #generate 100 rows from U(0,1)
lambda <- exp(beta0 + beta1*x)
y <- rpois(100, lambda)
my_est <- round(find_beta(start_guess = c(0,0),
x = x,
y = y,
z = NULL,
data = data.frame(x,y,z))$estimates,2)
z <- runif(100, min = 0.1, max = 1.1) #generate 100 rows from U(0.1,1.1)
my_est <- round(find_beta(start_guess = c(0.1,0.1),
x = "x",
y = "y",
z = "z",
data = data.frame(x,y,z))$estimates,2)
set.seed(1031)
beta0 <- 0.5
beta1 <- 0.25
beta2 <- 0.2
x <- runif(100, min = 0, max = 1) #generate 100 rows from U(0,1)
z <- runif(100, min = 0.1, max = 1.1) #generate 100 rows from U(0.1,1.1)
lambda <- exp(beta0 + beta1*x + beta2*z)
y <- rpois(100, lambda)
my_est <- round(find_beta(start_guess = c(0.1, 0.1, 0.1),
x = "x",
y = "y",
z = "z",
data = data.frame(x,y,z))$estimates,2)
set.seed(1031)
beta0 <- 0.5
beta1 <- 0.25
beta2 <- 0.2
x <- runif(100, min = 0, max = 1) #generate 100 rows from U(0,1)
z <- runif(100, min = 0.1, max = 1.1) #generate 100 rows from U(0.1,1.1)
lambda <- exp(beta0 + beta1*x + beta2*z)
y <- rpois(100, lambda)
my_est <- round(find_beta(start_guess = c(0.1, 0.2, 0.21),
x = "x",
y = "y",
z = "z",
data = data.frame(x,y,z))$estimates,2)
find_beta <- function(start_guess, x, y, z, data,
maxtol = 0.00001,
maxiter = 1000,
verbose = FALSE) {
beta_curr <- start_guess
diff <- maxtol + 1
iterations <- 0
while(diff > maxtol & iterations <= maxiter){
beta_next <- beta_curr - solve(info(beta_curr, x, z, data)) %*% U(beta_curr, x, y, z, data)
diff <- max(abs(beta_next - beta_curr))
iterations <- iterations + 1
beta_curr <- beta_next
if(verbose) {
print(paste("beta_next:", beta_next,"\n"))
print(paste("diff:", diff, "\n"))
print(paste("iterations:", iterations, "\n"))
}
}
if(diff > maxtol & iterations >= maxiter){
conv_msg = "We hit the maximum number of iterations but did not converge."
}
else { conv_msg = "We have achieved convergence!"}
return(list(estimates = beta_curr,
convergence = conv_msg))
}
set.seed(1031)
beta0 <- 0.5
beta1 <- 0.25
beta2 <- 0.2
x <- runif(100, min = 0, max = 1) #generate 100 rows from U(0,1)
z <- runif(100, min = 0.1, max = 1.1) #generate 100 rows from U(0.1,1.1)
lambda <- exp(beta0 + beta1*x + beta2*z)
y <- rpois(100, lambda)
my_est <- round(find_beta(start_guess = c(0.1, 0.2, 0.21),
x = "x",
y = "y",
z = "z",
data = data.frame(x,y,z))$estimates,2)
diff
start_guess <- c(0.1, 0.2, 0.21)
maxtol = 0.00001
maxiter = 1000
beta_curr <- start_guess
diff <- maxtol + 1
iterations <- 0
verbose <- TRUE
data
while(diff > maxtol & iterations <= maxiter){
beta_next <- beta_curr - solve(info(beta_curr, "x", "z", data)) %*% U(beta_curr, "x", "y", "z", data)
diff <- max(abs(beta_next - beta_curr))
iterations <- iterations + 1
beta_curr <- beta_next
if(verbose) {
print(paste("beta_next:", beta_next,"\n"))
print(paste("diff:", diff, "\n"))
print(paste("iterations:", iterations, "\n"))
}
}
a <- c(1,2,3)
b <- c(3,5,7)
b <- -1 * b
a-b
b <- -1 * b
a <- -1 * a
b
a
a-b
abs(a-b)
max(abs(a-b))
settings <- c(1,2,3,4)
error_settings <- c(1,2,3,4,5)
generate_data <- function(error, n){
set.seed(1031)
X <- rnorm(n,0,1)
Z <- rnorm(n,0,1)
beta <- c(1,2,3)
lambda <- exp(beta[1] + beta[2]*X + beta[3]*Z)
Y <- rpois(n, lambda)
if(error == 1){
Xstar <- X
}
else{
if(error == 2){
Xstar <- X + rnorm(0,1)
}
else{
if(error == 3){
Xstar <- X + Z + rnorm(0,1)
}
else{
if(error == 4){
Xstar <- X * Z + rnorm(0,1)
}
else{ #error == 5
Xstar <- X + rnorm(mean(Z) + 1)
}
}
}
}
return(data = data.frame(Xstar,Y,Z), beta)
}
generate_data(1,100)
generate_data <- function(error, n){
set.seed(1031)
X <- rnorm(n,0,1)
Z <- rnorm(n,0,1)
beta <- c(1,2,3)
lambda <- exp(beta[1] + beta[2]*X + beta[3]*Z)
Y <- rpois(n, lambda)
if(error == 1){
Xstar <- X
}
else{
if(error == 2){
Xstar <- X + rnorm(0,1)
}
else{
if(error == 3){
Xstar <- X + Z + rnorm(0,1)
}
else{
if(error == 4){
Xstar <- X * Z + rnorm(0,1)
}
else{ #error == 5
Xstar <- X + rnorm(mean(Z) + 1)
}
}
}
}
return(list(data = data.frame(Xstar,Y,Z), beta))
}
generate_data(1,100)
generate_data <- function(error, n){
set.seed(1031)
X <- rnorm(n,0,1)
Z <- rnorm(n,0,1)
beta <- c(1,2,3)
lambda <- exp(beta[1] + beta[2]*X + beta[3]*Z)
Y <- rpois(n, lambda)
if(error == 1){
Xstar <- X
}
else{
if(error == 2){
Xstar <- X + rnorm(0,1)
}
else{
if(error == 3){
Xstar <- X + Z + rnorm(0,1)
}
else{
if(error == 4){
Xstar <- X * Z + rnorm(0,1)
}
else{ #error == 5
Xstar <- X + rnorm(mean(Z) + 1)
}
}
}
}
return(list(data = data.frame(Xstar,Y,Z), beta = beta))
}
generate_data(1,100)
generate_data(1,100)
couples[1:20,]
couples |> filter(show == "Fleabag")
couples |> filter(show == "Better Caul Saul")
ratings_couples |>
dplyr::mutate(fit = its_mod$fitted.values,
cf = its_mod$coefficients[1] + its_mod$coefficients[2] * eps_since_kiss) |>
ggplot(aes( x = eps_since_kiss, y = rating, group = after_first_kiss)) +
geom_point(aes(color = after_first_kiss), alpha = 0.5) +
geom_line(aes(y = fit), color = "#573164", size = 1.2) +
geom_line(aes(y = cf), linetype = "dotted",
color = "#573164", size = 1.2) + ## add dashed line with CF trajectory to plot
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "#573164"),
axis.text = element_text(color = "#573164",
size = 24),
axis.title = element_text(color = "#573164",
size = 26,
face = "bold"),
plot.title = element_text(color = "#573164",
size = 32,
face = "bold",
hjust = 0.5),
plot.subtitle = element_text(color = "#573164",
size = 28,
face = "bold",
hjust = 0.5),
legend.position = "none") +
scale_color_manual(values = c("#89c8f5", "#fa9bd1")) +
labs(x = "Episodes Since the Kiss",
y = "Rating",
title = "Rating Trends Before and After the Kiss",
color = "After The Kiss?")
ggsave("model_all_shows.png",
path = "/Users/ashleymullan/Documents/Grad School/Wake Forest/M.S. Coursework/Research/TV-Modeling/tv_analysis_its/",
width = 11.5,
height = 6,
units = "cm")
newgirl |>
dplyr::mutate(fit = its_mod_ng$fitted.values,
cf = its_mod_ng$coefficients[1] + its_mod_ng$coefficients[2] * eps_since_kiss ## counterfactual, extending pre-kiss model
) |>
ggplot(aes(x = eps_since_kiss, y = rating, group = after_first_kiss)) +
geom_point(aes(color = after_first_kiss), alpha = 0.5) +
geom_line(aes(y = fit), size = 1.2, color = "#573164") +
geom_line(aes(y = cf), linetype = "dotted",
size = 1.2, color = "#573164") + ## add dashed line with cf trajectory to plot
theme_minimal() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(color = "#573164"),
axis.text = element_text(color = "#573164",
size = 24),
axis.title = element_text(color = "#573164",
size = 26,
face = "bold"),
plot.title = element_text(color = "#573164",
size = 32,
face = "bold",
hjust = 0.5),
plot.subtitle = element_text(color = "#573164",
size = 28,
face = "bold",
hjust = 0.5),
legend.position = "none") +
scale_color_manual(values = c("#89c8f5", "#fa9bd1")) +
labs(title = "New Girl Rating Trends",
x = "Episode Since the Kiss",
y = "Rating",
color = "After the Kiss?")
ggsave("model_newgirl.png",
path = "/Users/ashleymullan/Documents/Grad School/Wake Forest/M.S. Coursework/Research/TV-Modeling/tv_analysis_its/",
width = 11.5,
height = 6,
units = "cm")
library(AER)
library(tidyverse)
data("NMES1988")
names <- NMES1988 |>
select(visits, hospital, health, chronic, gender, school, insurance)
library(pscl)
m1 <- hurdle(visits ~ ., dist = "negbin", zero.dist = "binomial", data = nmes)
summary(m1)
nmes <- NMES1988 |>
select(visits, hospital, health, chronic, gender, school, insurance)
m1 <- hurdle(visits ~ ., dist = "negbin", zero.dist = "binomial", data = nmes)
summary(m1)
#Q1 - is there a relationship between years of ed and physician visits
m1red <- hurdle(visits ~ hospital + health + chronic + gender + insurance)
#Q1 - is there a relationship between years of ed and physician visits
m1red <- hurdle(visits ~ hospital + health + chronic + gender + insurance,
dist = "negbin", zero.dist = "binomial",
data = nmes)
pchisq(2*(m1$loglik - m1red$loglik), 2, lower.tail = F)
#Q2 - are insured more likely to visit at least once?
m2 <- hurdle(visits ~ hospital + health + chronic, gender, school | .,
dist = "negbin", zero.dist = "binomial",
data = nmes)
#Q2 - are insured more likely to visit at least once?
m2 <- hurdle(visits ~ hospital + health + chronic + gender +school | .,
dist = "negbin", zero.dist = "binomial",
data = nmes)
pchisq(2*(m1$loglik = m2$loglik), df = 1, lower.tail = F)
pchisq(2*(m1$loglik - m2$loglik), df = 1, lower.tail = F)
#Q2 - are insured more likely to visit at least once?
m2 <- hurdle(visits ~ hospital + health + chronic + gender +school | .,
dist = "negbin", zero.dist = "binomial",
data = nmes)
pchisq(2*(m1$loglik - m2$loglik), df = 1, lower.tail = F)
#Q3 - among visiters, men less?
summary(m1)
pnorm(-2.108, lower.tail = TRUE)
